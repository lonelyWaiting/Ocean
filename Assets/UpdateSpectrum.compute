// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateSpecturmCS

#define BLOCK_SIZE 16
#define BLOCK_SIZE 16

StructuredBuffer<float2>    H0;
StructuredBuffer<float>     Omega;
RWStructuredBuffer<float2>  HK;
RWStructuredBuffer<float2>  Dx;
RWStructuredBuffer<float2>  Dy;

uint  Dimension;
float curTime;

[numthreads(BLOCK_SIZE, BLOCK_SIZE, 1)]
void UpdateSpecturmCS(uint3 id : SV_DispatchThreadID)
{
    uint in_Index = id.y * Dimension + id.x;
    // 共轭
    uint in_mIndex = (Dimension - id.y) * Dimension + (Dimension - id.x);
    uint out_index = id.y * Dimension + id.x;

    // H(0) -> H(k)
    float2 H0_k  = H0[in_Index];
    float2 H0_mk = H0[in_mIndex];

    float _sin = sin(Omega[in_Index] * curTime);
    float _cos = cos(Omega[in_Index] * curTime);

    float2 ht;
    ht.x = (H0_k.x + H0_mk.x) * _cos - (H0_k.y + H0_mk.y) * _sin;
    ht.y = (H0_k.x - H0_mk.x) * _sin + (H0_k.y + H0_mk.y) * _cos;

    // Dx,Dy
    float kx = id.x - Dimension * 0.5f;
    float ky = id.y - Dimension * 0.5f;

    float sqr_k = kx * kx + ky * ky;
    float rsqr_k = 0;
    if (sqr_k > 1e-12f) rsqr_k = 1.0f / sqrt(sqr_k);

    kx *= rsqr_k;
    ky *= rsqr_k;

    float2 dt_x = float2(ht.y * kx, -ht.x * kx);
    float2 dt_y = float2(ht.y * ky, -ht.x * ky);

    if(id.x < Dimension && id.y < Dimension)
    {
        HK[out_index] = ht;
        Dx[out_index] = dt_x;
        Dy[out_index] = dt_y;
    }
}
